package application;
	
import javafx.application.Application;
import javafx.geometry.Point2D;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Line;
import javafx.stage.Stage;
import javafx.scene.paint.Color;

public class Main extends Application 
{
  public void start(Stage primaryStage) 
  {       
    KochSnowFlakePane trianglePane = new KochSnowFlakePane();
    //trianglePane.getChildren().addAll(new Label(Integer.toString(trianglePane.order)));
    
    
    TextField tfOrder = new TextField(); 
    //tfOrder.setOnAction(e -> trianglePane.setOrder(Integer.parseInt(tfOrder.getText())));
    tfOrder.setPrefColumnCount(4);
    tfOrder.setAlignment(Pos.CENTER);

    Button btn = new Button();
    btn.setOnAction(e -> trianglePane.setOrder(Integer.parseInt(tfOrder.getText())));
    btn.setText("Update order");
    
    //Button btn2 = new Button();
    //btn.setOnAction(e -> trianglePane.paint());
    
    // Pane to hold label, text field, and a button
    HBox hbox = new HBox(10);
    hbox.getChildren().addAll(new Label("Enter an order: "), tfOrder, btn);
    hbox.setAlignment(Pos.BOTTOM_LEFT);
    
    BorderPane bpane = new BorderPane();
    bpane.setCenter(trianglePane);
    bpane.setBottom(hbox);
    
    // Create a scene and place it in the stage
    Scene scene = new Scene(bpane, 200, 210);
    primaryStage.setTitle("Koch Snowflake");
    primaryStage.setScene(scene);
    primaryStage.show();
    
    trianglePane.widthProperty().addListener(ov -> trianglePane.paint());
    trianglePane.heightProperty().addListener(ov -> trianglePane.paint());
  }

/****** Embedded class ****/
  /** Pane for displaying fractal */
  static class KochSnowFlakePane extends Pane 
  {
	public int order;
	
	public KochSnowFlakePane()
	{
		this.order = 0;
	}
	
	public boolean setOrder(int new_order)
	{
		if(new_order >= 0)
		{
			this.order = new_order;
			paint();
			return true;
		}
		else
		{
			return false;
		}
	}
	
	protected void paint()
	{
		Point2D p1 = new Point2D(getWidth() / 2, 10);
		Point2D p2 = new Point2D(10, getHeight() - 10);
		Point2D p3 = new Point2D(getWidth() -10, getHeight() - 10);
		
		this.getChildren().clear();
		//this.getChildren().addAll(new Label(Integer.toString(this.order)));
		
		this.displayKochSnowFlake(this.order,p1,p2);
		this.displayKochSnowFlake(this.order,p2,p3);
		this.displayKochSnowFlake(this.order,p3,p1);
	}
	
    private void displayKochSnowFlake(int order, Point2D p1, Point2D p2) 
    {
      if(order == 0)
      {
    	  Line l = new Line();
    	  l.setStartX(p1.getX());
    	  l.setStartY(p1.getY());
    	  l.setEndX(p2.getX());
    	  l.setEndY(p2.getY());
    	  l.setStroke(Color.BLACK);
    	  this.getChildren().add(l);
    	  
    	  return;
      }
      else
      {
    	 double deltaX = p2.getX() - p1.getX();
    	 double deltaY = p2.getY() - p1.getY();
    	 
         //Some of the math to get you down the right path
         Point2D x = new Point2D(p1.getX() + deltaX / 3, p1.getY() + deltaY / 3);
         Point2D y = new Point2D(p1.getX() + deltaX * 2 / 3, p1.getY() + deltaY * 2 / 3);
         Point2D z = new Point2D(
           (p1.getX() + p2.getX()) / 2 + Math.cos(Math.toRadians(30)) * (p1.getY() - p2.getY()) / 3,
           (p1.getY() + p2.getY()) / 2 + Math.cos(Math.toRadians(30)) * (p2.getX() - p1.getX()) / 3);
   	  	 
         // Recursively display snow flakes on lines
         this.displayKochSnowFlake(order - 1, p1, x);
         this.displayKochSnowFlake(order - 1, y, p2);
         //this.displayKochSnowFlake(order-1, y, x);
         this.displayKochSnowFlake(order-1, z, y);
         this.displayKochSnowFlake(order-1, x, z);
      }  
    }  
  }
  
  public static void main(String[] args) 
  {
    launch(args);
  }
}
